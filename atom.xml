<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小谈同学</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tab-tan.github.io/"/>
  <updated>2020-07-27T02:37:25.275Z</updated>
  <id>http://tab-tan.github.io/</id>
  
  <author>
    <name>Tab tan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>类加载器</title>
    <link href="http://tab-tan.github.io/2020/07/27/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
    <id>http://tab-tan.github.io/2020/07/27/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</id>
    <published>2020-07-27T01:48:27.000Z</published>
    <updated>2020-07-27T02:37:25.275Z</updated>
    
    <content type="html"><![CDATA[<h3 id="各层级类加载器的关系"><a href="#各层级类加载器的关系" class="headerlink" title="各层级类加载器的关系"></a>各层级类加载器的关系</h3><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Tab-tan/CDN@1.1.6/pic/clgx.png" alt="类加载器" title="类加载器"></p><h4 id="ClassLoader的继承树"><a href="#ClassLoader的继承树" class="headerlink" title="ClassLoader的继承树"></a>ClassLoader的继承树</h4><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Tab-tan/CDN@1.1.6/pic/ClassLoader.png" alt=""></p><h3 id="类加载器的分类"><a href="#类加载器的分类" class="headerlink" title="类加载器的分类"></a>类加载器的分类</h3><h4 id="虚拟机自带的加载器"><a href="#虚拟机自带的加载器" class="headerlink" title="虚拟机自带的加载器"></a>虚拟机自带的加载器</h4><blockquote><ul><li>启动类加载器（引导类加载器  Bootstrap ClassLoader）<ul><li>使用c/c++实现的，嵌套在JVM内部</li><li>用来加载Java的核心库，用于提供JVM自身需要的类</li><li>并不继承自java.lang.ClassLoader，没有父加载器</li><li>加载扩展类和应用程序类加载器，并指定为他们的父类加载器</li><li>只加载包名为java、javax、sun等开头的类</li></ul></li><li>扩展类加载器（Extension ClassLoader）<ul><li>Java编写，由sun.misc.Launcher$ExtClassLoader实现</li><li>派生于ClassLoader类</li><li>父类加载器为启动类加载器</li><li>从java.ext.dirs系统属性所指定的目录中加载类库，或从JDK的安装目录jre/lib/ext子目录(扩展目录)下加载类库。如果用户创建的JAR放在此目录下，也会自动由扩展类加载器加载。</li></ul></li><li>应用程序类加载器（系统类加载器 AppClassLoader）<ul><li>java编写，由sun.misc.Launcher$AppClassLoader实现</li><li>派生于ClassLoader类</li><li>父类加载器为扩展类加载器</li><li>负责加载环境变量classpath或系统属性java.class.path指定路径下的类库</li><li>该类加载是程序中默认的类加载器，一般来说，Java应用的类都是由它来完成加载</li><li>通过ClassLoader#getSystemClassLoader()方法可以获取到该类加载器</li></ul></li><li>用户自定义类加载器<ul><li>为什么要自定义类的加载器？<ul><li>隔离加载类</li><li>修改类加载方式</li><li>扩展加载源</li><li>防止源码泄漏</li></ul></li><li>实现步骤<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Tab-tan/CDN@1.1.6/pic/zdycl.png" alt=""></li></ul></li></ul></blockquote><h3 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h3><blockquote><p>ClassLoader类，他是一个抽象类，其后所有的类加载器都继承自ClassLoader(不包括启动类加载器) 常用方法如下表:</p></blockquote><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">getParent()</td><td align="center">返回该类加载器的超类加载器</td></tr><tr><td align="center">loadClass(String name)</td><td align="center">加载名称为name的类，返回java.lang.Class类的实例</td></tr><tr><td align="center">findClass(String name)</td><td align="center">查找名为name的类，返回java.lang.Class类的实例</td></tr><tr><td align="center">findLoadedClass(String name)</td><td align="center">查找名为name的已经被加载过的类，返回结果为java.lang.Class类的实例</td></tr><tr><td align="center">defineClass(String name,byte[] b,int off,int len)</td><td align="center">把字节数组b中的内容转换为一个java类，返回结果为java.lang.Class类的实例</td></tr><tr><td align="center">resolveClass(Class&lt;?&gt;c)</td><td align="center">链接指定的一个java类</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;各层级类加载器的关系&quot;&gt;&lt;a href=&quot;#各层级类加载器的关系&quot; class=&quot;headerlink&quot; title=&quot;各层级类加载器的关系&quot;&gt;&lt;/a&gt;各层级类加载器的关系&lt;/h3&gt;&lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-src=
      
    
    </summary>
    
    
      <category term="JVM" scheme="http://tab-tan.github.io/categories/JVM/"/>
    
    
      <category term="JVM" scheme="http://tab-tan.github.io/tags/JVM/"/>
    
      <category term="基础" scheme="http://tab-tan.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="类加载器" scheme="http://tab-tan.github.io/tags/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>双亲委派机制</title>
    <link href="http://tab-tan.github.io/2020/07/27/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6/"/>
    <id>http://tab-tan.github.io/2020/07/27/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6/</id>
    <published>2020-07-27T01:13:20.000Z</published>
    <updated>2020-07-27T01:47:28.420Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><blockquote><p>Java虚拟机对class文件采用的是<strong>按需加载</strong>的方式，也就是说当需要使用该类时才会将它的class文件加载到内存生成class对象。而且加载某个类的class时，Java虚拟机采用的是<strong>双亲委派模式</strong>，即把请求交由父类处理，它是一种任务委派模式。</p></blockquote><h3 id="双亲委派机制工作原理"><a href="#双亲委派机制工作原理" class="headerlink" title="双亲委派机制工作原理"></a>双亲委派机制工作原理</h3><blockquote><ol><li>如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行</li><li>如果父类加载器还存在父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器</li><li>如果父类加载器可以完成加载任务，就成功返回，若不能完成则子加载器才会尝试自己加载</li></ol></blockquote><p>图示：</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Tab-tan/CDN@1.1.5/pic/clipboard.png" alt="双亲委派机制" title="双亲委派机制"></p><h3 id="双亲委派机制优势"><a href="#双亲委派机制优势" class="headerlink" title="双亲委派机制优势"></a>双亲委派机制优势</h3><blockquote><ol><li>避免类的重复加载</li><li>保护程序安全，防止核心API被随意篡改</li></ol></blockquote><h3 id="沙箱安全机制"><a href="#沙箱安全机制" class="headerlink" title="沙箱安全机制"></a>沙箱安全机制</h3><blockquote><p>在加载类的时候遇到用户自定义如java.lang包的类时，这个类会被委派到引导类加载器。引导类加载器会对此类进行校验，假如此类不是核心库中的类则会直接报错终止程序。这种安全校验就是沙箱安全机制，对jvm和程序起到了保护作用。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;headerlink&quot; title=&quot;引入&quot;&gt;&lt;/a&gt;引入&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Java虚拟机对class文件采用的是&lt;strong&gt;按需加载&lt;/strong&gt;的方式，也就是说当需要使用该类时才
      
    
    </summary>
    
    
      <category term="JVM" scheme="http://tab-tan.github.io/categories/JVM/"/>
    
    
      <category term="JVM" scheme="http://tab-tan.github.io/tags/JVM/"/>
    
      <category term="机制" scheme="http://tab-tan.github.io/tags/%E6%9C%BA%E5%88%B6/"/>
    
      <category term="基础" scheme="http://tab-tan.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>类的加载过程</title>
    <link href="http://tab-tan.github.io/2020/07/26/%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/"/>
    <id>http://tab-tan.github.io/2020/07/26/%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/</id>
    <published>2020-07-26T10:36:23.000Z</published>
    <updated>2020-07-26T23:24:36.983Z</updated>
    
    <content type="html"><![CDATA[<h3 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h3><p>类的加载有三大步 <strong>加载</strong> <strong>链接</strong> <strong>初始化</strong><br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Tab-tan/CDN@1.1.4/pic/%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD.png" alt=""></p><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><blockquote><ul><li>通过类的全限定名获取定义此类的二进制字节流</li><li>将这个字节流所代表的的静态存储结构转化为方法区的运行时数据结构</li><li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口</li></ul></blockquote><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><blockquote><ul><li>验证(Verify)<ul><li>目的在于确保class文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全。</li><li>主要包括四种验证，文件格式验证，元数据验证，字节码验证，符号引用验证。</li></ul></li><li>准备(Prepare)<ul><li>为类变量分配内存并且设置该变量的默认初始值，即零值。</li><li>这里不包括含用final修饰的static，因为final在编译的时候就会分配，准备阶段会显示初始化。</li><li>这里不会为实例变量分配初始化，变量会分配在方法区中，而实例变量是会随着对象一起分配到Java堆中。</li></ul></li><li>解析(Resolve)<ul><li>将常量池内的符号引用转换为直接引用的过程。</li><li>事实上，解析操作往往会伴随着JVM在执行完初始化之后再执行。</li><li>符号引用就是一组符号来描述所引用的目标。符号引用的字面量形式明确定义在《Java虚拟机规范》的Class文件格式中。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。</li><li>解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。对应常量池中的CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSTANT_Methodref_info等。</li></ul></li></ul></blockquote><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><blockquote><ul><li>初始化阶段就是执行类构造器方法<clinit>()的过程。</li><li>此方法不需要定义，是javac编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来。</li><li>构造器方法中指令按语句在源文件中出现的顺序执行。</li><li><clinit>()不同于类的构造器。(关联：构造器是虚拟机视角下的<clinit>())</li><li>若该类具有父类，JVM会保证子类的<clinit>()执行前父类的<clinit>()已经执行完毕。</li><li>虚拟机必须保证一个类的<clinit>()方法在多线程下被同步加锁。</li></ul></blockquote><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><ol><li>初始化的最后一点意思是<strong>一个类只会被加载一次</strong>，我们来用代码对这句话进行验证。代码如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadThread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable r = ()-&gt;&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">" 开始"</span>);</span><br><span class="line">            <span class="keyword">new</span> Dead();</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">" 结束"</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(r,<span class="string">"线程1"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(r,<span class="string">"线程2"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dead</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"正在进行初始化"</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Tab-tan/CDN@1.1.4/pic/deadthread.png" alt=""></p><p>简单的说明一下，这里故意让Dead类无法正常的加载，然后起了两个线程去加载这个类。从结果来看线程2先来对Dead进行了加载，而在线程2没有加载完的情况下线程1没有去加载Dead类，验证了只会被加载一次。</p><ol start="2"><li>理解类的加载得出答案</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClinitTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> A=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            A=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sun</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> B=A;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Sun.B);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Tab-tan/CDN@1.1.4/pic/clinit.png" alt=""></p><p>说明在加载子类的时候会首先加载其父类，这里加载Sun的时候首先去加载了父类Father成员变量A的值由1变成2，当加载Sun时A的值为2，所以赋值给B，B的值为2</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;类的加载过程&quot;&gt;&lt;a href=&quot;#类的加载过程&quot; class=&quot;headerlink&quot; title=&quot;类的加载过程&quot;&gt;&lt;/a&gt;类的加载过程&lt;/h3&gt;&lt;p&gt;类的加载有三大步 &lt;strong&gt;加载&lt;/strong&gt; &lt;strong&gt;链接&lt;/strong&gt; &lt;stro
      
    
    </summary>
    
    
      <category term="JVM" scheme="http://tab-tan.github.io/categories/JVM/"/>
    
    
      <category term="JVM" scheme="http://tab-tan.github.io/tags/JVM/"/>
    
      <category term="基础" scheme="http://tab-tan.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="类的加载" scheme="http://tab-tan.github.io/tags/%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>多线程</title>
    <link href="http://tab-tan.github.io/2020/07/25/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://tab-tan.github.io/2020/07/25/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2020-07-25T13:09:08.000Z</published>
    <updated>2020-07-25T13:51:30.388Z</updated>
    
    <content type="html"><![CDATA[<h2 id="多线程基础"><a href="#多线程基础" class="headerlink" title="多线程基础"></a>多线程基础</h2><h3 id="实现多线程的四种方式"><a href="#实现多线程的四种方式" class="headerlink" title="实现多线程的四种方式"></a>实现多线程的四种方式</h3><ol><li>继承Thread类</li><li>实现Runnable接口</li><li>实现Callable接口</li><li>使用线程池</li></ol><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><blockquote><p>run(),start(),currentThread(),getName(),<br>yield()(放弃cpu的当前执行权),<br>wait(),notify()/notifyAll(),join()<br>sleep(),isAlive(),stop()(已过时)</p></blockquote><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><blockquote><p>MAX_PRIORITY:10（Thread.MAX_PRIORITY）<br>MIN_PRIORITY:1<br>NORM_PRIORITY:5</p></blockquote><h3 id="线程的同步（线程的安全问题）"><a href="#线程的同步（线程的安全问题）" class="headerlink" title="线程的同步（线程的安全问题）"></a>线程的同步（线程的安全问题）</h3><ol><li>操作共享数据的代码，即为被同步的代码。</li><li>共享数据：多个线程抢夺的资源</li><li>同步监视器，俗称：锁。</li></ol><h3 id="Callable接口"><a href="#Callable接口" class="headerlink" title="Callable接口"></a>Callable接口</h3><ol><li><p>实现类实现Callable接口</p></li><li><p>将实现类作为参数创建FutureTask</p></li><li><p>将FutureTask对象作为参数创建Thread并启动线程</p><p> 代码：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">NumSum ns = <span class="keyword">new</span> NumSum();</span><br><span class="line">FutureTask f = <span class="keyword">new</span> FutureTask(ns);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(f).start();</span><br><span class="line">Object object;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">object = f.get();</span><br><span class="line">System.out.println(object);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumSum</span> <span class="keyword">implements</span> <span class="title">Callable</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;<span class="number">50</span> ; i++) &#123;</span><br><span class="line">sum++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 结果：<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Tab-tan/CDN@1.1.3/pic/callable.png" alt="callable接口"></p><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3></li><li><p><strong>JDK5.0提供线程池相关API</strong>：ExecutorService(接口)和Excutors(工具类)</p></li><li><p><strong>常用方法</strong>：</p><ul><li><p>Executors.newFixedThreadPool(int i)创建固定数量的线程池。</p></li><li><p>excute()执行，无返回值</p></li><li><p>submit()执行，可以有返回值</p></li><li><p>shutdown()关闭线程池</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MyTest myTest = <span class="keyword">new</span> MyTest();</span><br><span class="line">ExecutorService pool = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">pool.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">Future submit = pool.submit(myTest);</span><br><span class="line">Object object;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">object = submit.get();</span><br><span class="line">System.out.println(object);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭连接池</span></span><br><span class="line">pool.isShutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> <span class="keyword">implements</span> <span class="title">Callable</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">m++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Tab-tan/CDN@1.1.3/pic/threadPool.png" alt="线程池" title="线程池"></p></li></ul></li></ol><h3 id="设置线程池属性"><a href="#设置线程池属性" class="headerlink" title="设置线程池属性"></a>设置线程池属性</h3><blockquote><p>corePoolSize:核心池大小<br>maximumPoolSize:最大线程数<br>keepAliveTime:无任务终止时间数</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;多线程基础&quot;&gt;&lt;a href=&quot;#多线程基础&quot; class=&quot;headerlink&quot; title=&quot;多线程基础&quot;&gt;&lt;/a&gt;多线程基础&lt;/h2&gt;&lt;h3 id=&quot;实现多线程的四种方式&quot;&gt;&lt;a href=&quot;#实现多线程的四种方式&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="Java SE" scheme="http://tab-tan.github.io/categories/Java-SE/"/>
    
    
      <category term="基础" scheme="http://tab-tan.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="多线程" scheme="http://tab-tan.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>搭建博客</title>
    <link href="http://tab-tan.github.io/2020/07/25/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://tab-tan.github.io/2020/07/25/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-07-25T11:40:38.000Z</published>
    <updated>2020-07-25T12:53:55.625Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><h3 id="github-hexo搭建个人博客"><a href="#github-hexo搭建个人博客" class="headerlink" title="github+hexo搭建个人博客"></a>github+hexo搭建个人博客</h3><hr><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><ol><li>安装nodejs<blockquote><p>前往nodejs官网下载安装<br>链接-<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a></p></blockquote></li><li>安装hexo<blockquote><p>npm install -g hexo-cli(建议安装淘宝cnpm更快你懂的~)</p></blockquote></li><li>创建博客文件夹<blockquote><p>mkdir blog</p></blockquote></li></ol><p>如图:<br> <img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Tab-tan/CDN@1.1/pic/dir.png" alt="创建文件夹"></p><ol start="4"><li><p>初始化hexo</p><blockquote><p>打开命令行进入创建好的blog命令行开始操作~<br>hexo init</p></blockquote></li><li><p>小操作</p><blockquote><p>hexo n 博客标题:创建文章<br>hexo clean | g(生成) | s(本地服务)</p></blockquote></li><li><p>安装插件</p><blockquote><p>npm install –save hexo-deployer-git</p></blockquote></li><li><p>修改_config.yml文件</p><blockquote><p>deploy:<br>type: ‘git’<br>repo: ‘<a href="https://github.com/Tab-Tan/Tab-tan.github.io.git&#39;" target="_blank" rel="noopener">https://github.com/Tab-Tan/Tab-tan.github.io.git&#39;</a><br>branch: ‘master’</p></blockquote></li><li><p>远程部署</p><blockquote><p>hexo d</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;h3 id=&quot;github-hexo搭建个人博客&quot;&gt;&lt;a href=&quot;#github-hexo搭建个人博客&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="其他" scheme="http://tab-tan.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="搭建" scheme="http://tab-tan.github.io/tags/%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="http://tab-tan.github.io/2020/07/24/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://tab-tan.github.io/2020/07/24/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-07-24T11:09:03.000Z</published>
    <updated>2020-07-25T09:08:59.049Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一个博客"><a href="#第一个博客" class="headerlink" title="第一个博客"></a>第一个博客</h2><p>也不知道说些什么 Java天下第一！</p><p>yeah~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第一个博客&quot;&gt;&lt;a href=&quot;#第一个博客&quot; class=&quot;headerlink&quot; title=&quot;第一个博客&quot;&gt;&lt;/a&gt;第一个博客&lt;/h2&gt;&lt;p&gt;也不知道说些什么 Java天下第一！&lt;/p&gt;
&lt;p&gt;yeah~&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="日常" scheme="http://tab-tan.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="其他" scheme="http://tab-tan.github.io/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>hello-world</title>
    <link href="http://tab-tan.github.io/2020/07/24/hello-world/"/>
    <id>http://tab-tan.github.io/2020/07/24/hello-world/</id>
    <published>2020-07-24T10:01:59.985Z</published>
    <updated>2020-07-25T09:10:15.392Z</updated>
    
    <content type="html"><![CDATA[<h2 id="title-Hello-World"><a href="#title-Hello-World" class="headerlink" title="title: Hello World"></a>title: Hello World</h2><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;title-Hello-World&quot;&gt;&lt;a href=&quot;#title-Hello-World&quot; class=&quot;headerlink&quot; title=&quot;title: Hello World&quot;&gt;&lt;/a&gt;title: Hello World&lt;/h2&gt;&lt;p&gt;Welcome 
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
